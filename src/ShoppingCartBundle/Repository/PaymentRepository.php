<?php

namespace ShoppingCartBundle\Repository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $paymentId
     * @param $discount
     * @param $payment
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function paymentPaid($paymentId, $discount, $payment)
    {
        return $this->createQueryBuilder('p')
            ->update()
            ->set('p.payment', '?1')
            ->setParameter(1, $discount)
            ->set('p.payment', '?2')
            ->setParameter(2, $payment)
            ->set('p.isPaid', '?3')
            ->setParameter(3, true)
            ->where('p.id = ?4')
            ->setParameter(4, $paymentId)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findYourCart($userId)
    {
        return $this->createQueryBuilder('p')
            ->innerJoin('p.products', 'pr', Join::WITH, 'pr.id = p.productId')
            ->innerJoin('p.users', 'u', Join::WITH, 'u.id = p.userId')
            ->where('p.userId = :userId')
            ->andWhere('p.isPaid = :isPaid')
            ->orderBy('p.datePurchases')
            ->orderBy('p.id')
            ->setParameter('userId', $userId)
            ->setParameter('isPaid', false)
            ->getQuery()
            ->getResult();
    }

    public function findSumYourCart($userId)
    {
        return $this->createQueryBuilder('p')
            ->innerJoin('p.products', 'pr', Join::WITH, 'pr.id = p.productId')
            ->innerJoin('p.users', 'u', Join::WITH, 'u.id = p.userId')
            ->where('p.userId = :userId')
            ->andWhere('p.isPaid = :isPaid')
            ->orderBy('p.datePurchases')
            ->orderBy('p.id')
            ->setParameter('userId', $userId)
            ->setParameter('isPaid', false)
            ->select('SUM(p.price) AS totalPrice')
            ->getQuery()
            ->getResult();
    }
}
